{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-07f9895dc5340aa4b0835bbd79fd9339",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "theme",
                    "defaultValue": "'light'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "defaultValue": "'sundowner'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "switchTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'sundowner';\n  theme = 'light';\n\n  switchTheme(): void {\n    switch (this.theme) {\n      case 'light':\n        this.theme = 'dark';\n        document.documentElement.setAttribute('data-theme', this.theme);\n        break;\n      case 'dark':\n        this.theme = 'light';\n        document.documentElement.setAttribute('data-theme', this.theme);\n        break;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles/utils';\r\n\r\nmain {\r\n    display: flex;\r\n    justify-content:center;\r\n    text-align:center;\r\n}\r\n\r\n.app-hero-img {\r\n    background-image: img(hero);\r\n    background-size:contain;\r\n    background-repeat:no-repeat;\r\n    background-position: center;\r\n    height:20rem;\r\n    width:20rem;\r\n    margin: 0 auto;\r\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<main>\r\n    <div>\r\n        <div class=\"app-hero-img\"></div>\r\n        <h1 [ngSwitch]=\"theme\">\r\n            <ng-container *ngSwitchCase=\"'light'\">\r\n                Light Theme\r\n            </ng-container>\r\n            <ng-container *ngSwitchCase=\"'dark'\">\r\n                Dark Theme\r\n            </ng-container>\r\n        </h1>\r\n        <app-button (click)=\"switchTheme()\" type=\"button\" color=\"primary\">\r\n            Switch\r\n        </app-button>\r\n    </div>\r\n</main>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-dbc51dfad343a79e8d29ec70d9e00fa4",
            "file": "src/app/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'default'",
                    "line": 10,
                    "type": "\"default\" | \"primary\""
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "line": 19
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "line": 16,
                    "type": "\"small\" | \"medium\" | \"large\""
                },
                {
                    "name": "style",
                    "defaultValue": "'fill'",
                    "line": 13,
                    "type": "\"fill\" | \"outline\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  @Input()\n  color: 'default' | 'primary' = 'default';\n\n  @Input()\n  style: 'fill' | 'outline' = 'fill';\n\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  @Input()\n  loading = false;\n\n  get className(): string {\n    return `\n      app-btn\n      app-btn--${this.size}\n      app-btn--${this.color}\n      ${this.loading ? 'app-btn--loading' : ''}\n      app-btn--${this.style}\n    `;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../styles/utils\";\r\n\r\n@mixin loading-button($color) {\r\n  padding-left: 3.5rem;\r\n  &:before {\r\n    content: \"\";\r\n    position: absolute;\r\n    border: 0.25rem solid color($color);\r\n    border-right-color: transparent;\r\n    border-radius: 100%;\r\n    width: 0.75rem;\r\n    height: 0.75rem;\r\n    left: 2.3rem;\r\n    right: auto;\r\n    animation: spin 0.8s linear infinite;\r\n  }\r\n}\r\n\r\n@mixin fill-button($base, $text) {\r\n  background-color: color($base);\r\n  border-color: color($base);\r\n  color: color($text);\r\n  &:not(:disabled) {\r\n    @include hover-active-focus {\r\n      background-color: dark-color($base);\r\n      border-color: dark-color($base);\r\n    }\r\n  }\r\n}\r\n\r\n@mixin outline-button($base, $text) {\r\n  border-color: color($base);\r\n  color: color($text);\r\n  background: none;\r\n}\r\n\r\n.app-btn {\r\n  $root: &;\r\n  border-radius: 0.55rem;\r\n  border: 0.15rem solid transparent;\r\n  box-sizing: border-box;\r\n  transition: color 0.2s ease-in-out, border 0.2s ease-in-out,\r\n    background-color 0.2s ease-in-out, padding 0.2s ease-in-out;\r\n  font-weight: 600;\r\n  display: flex;\r\n  background: none;\r\n  align-items: center;\r\n  @include fill-button(button, text);\r\n\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n    color: color(button-disabled-text) !important;\r\n    border-color: color(button-disabled) !important;\r\n    background-color: color(button-disabled) !important;\r\n  }\r\n\r\n  &--small {\r\n    font-size: 0.55rem;\r\n    padding: 0.45rem 1.5rem;\r\n  }\r\n\r\n  &--medium {\r\n    padding: 0.75rem 2rem;\r\n    font-size: 0.85rem;\r\n  }\r\n\r\n  &--large {\r\n    padding: 0.95rem 2.2rem;\r\n    font-size: 1.05rem;\r\n  }\r\n\r\n  &--loading {\r\n    @include loading-button(button-loading-spinner);\r\n  }\r\n\r\n  @each $k, $v in $button-colors {\r\n    &--#{$k} {\r\n      $fill: map-get($v, fill);\r\n      &#{$root}--fill {\r\n        @include fill-button(map-get($fill, base), map-get($fill, text));\r\n      }\r\n\r\n      $outline: map-get($v, outline);\r\n      &#{$root}--outline {\r\n        @include outline-button(\r\n          map-get($outline, base),\r\n          map-get($outline, text)\r\n        );\r\n        @include hover-active-focus {\r\n          @include fill-button(map-get($fill, base), map-get($fill, text));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "className": {
                    "name": "className",
                    "getSignature": {
                        "name": "className",
                        "type": "string",
                        "returnType": "string",
                        "line": 21
                    }
                }
            },
            "templateData": "<button [disabled]=\"loading\" [class]=\"className\">\n    <ng-content></ng-content>\n</button>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  moduleMetadata: {\n    declarations: [ButtonComponent],\n  },\n  template: `<app-button [loading]=\"loading\" [style]=\"style\" [color]=\"color\">Submit</app-button>`,\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/button.stories.ts": [
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  moduleMetadata: {\n    declarations: [ButtonComponent],\n  },\n  template: `<app-button [loading]=\"loading\" [style]=\"style\" [color]=\"color\">Submit</app-button>`,\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}